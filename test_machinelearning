# -*- coding: utf-8 -*-
"""COMPSCI101-Classification-Iris.ipynb

Automatically generated by Colaboratory.

"""

## load the iris dataset
from sklearn import datasets

iris = datasets.load_iris()

## inputs: attributes = features = specifications = ...
attributes = iris.data

print('attributes:\n', attributes)

## outputs / labels to match with the features / inputs
labels = iris.target

print('labels:\n', labels)

## feature name
print('feature names:', iris.feature_names)

## output / label / target names
print('labels:', iris.target_names)

"""Let's build a classification model matching inputs / features with the ouputs."""

## need to import LogisticRegression
from sklearn.linear_model import LogisticRegression

## we built a model
## mapping attributes to the labels (x --> y)
clf = LogisticRegression(random_state=0, max_iter = 1000).fit(attributes, labels)

"""Now let's see some results!!"""

## let's predict the labels in the original data
predicted_labels = clf.predict(attributes)

print('predicted_labels:\n', predicted_labels)

## accuracy: percentage of correctness in the prediction
from sklearn.metrics import accuracy_score

## we need to give the true / correct / original labels and the predicted ones
acc_score = accuracy_score(labels, predicted_labels)

print('acc_score:', acc_score)

"""Let's see how such a model work on cases which are unseen -- new flower examples"""

## we want to split the iris dataset into 2
## one part will be used for learning / training / model generation
## the other, remaining part will be used for testing (fair evaluation)
from sklearn.model_selection import train_test_split

X_train, X_test, y_train, y_test = train_test_split(attributes, labels, test_size=0.33)

## learn / generate a model solely based on the training data
clf_train = LogisticRegression(random_state=0, max_iter = 1000).fit(X_train, y_train)

pred_labels_train = clf_train.predict(X_train)
pred_labels_test = clf_train.predict(X_test)

acc_train_score = accuracy_score(y_train, pred_labels_train)

print('acc_train_score:', acc_train_score)

acc_test_score = accuracy_score(y_test, pred_labels_test)

print('acc_test_score:', acc_test_score)